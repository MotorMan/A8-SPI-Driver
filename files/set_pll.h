struct freq_pll
{
	const char *freq;
	unsigned int fildiv1;
	unsigned int fildiv2;
	unsigned int vilpll;
};
static struct freq_pll freq_pll_1385[] = {
	{"100",0x020040, 0x0420, 0x200241},
	{"125",0x028040, 0x0420, 0x280241},
	{"150",0x030040, 0x0420, 0x300241},
	{"175",0x038040, 0x0420, 0x380241},
	{"200",0x040040, 0x0420, 0x400241},
	{"225",0x048040, 0x0420, 0x480241},
	{"250",0x050040, 0x0420, 0x500241},
	{"275",0x058040, 0x0420, 0x580241},
	{"300",0x060040, 0x0420, 0x600241},
	{"325",0x068040, 0x0420, 0x680241},
	{"350",0x070040, 0x0420, 0x700241},
	{"375",0x078040, 0x0420, 0x780241},
	{"400",0x080040, 0x0420, 0x800241},
	{"404",0x061040, 0x0320, 0x610231},
	{"406",0x041040, 0x0220, 0x410221},
	{"408",0x062040, 0x0320, 0x620231},
	{"412",0x042040, 0x0220, 0x420221},
	{"416",0x064040, 0x0320, 0x640231},
	{"418",0x043040, 0x0220, 0x430221},
	{"420",0x065040, 0x0320, 0x650231},
	{"425",0x044040, 0x0220, 0x440221},
	{"429",0x067040, 0x0320, 0x670231},
	{"431",0x045040, 0x0220, 0x450221},
	{"433",0x068040, 0x0320, 0x680231},
	{"437",0x046040, 0x0220, 0x460221},
	{"441",0x06a040, 0x0320, 0x6a0231},
	{"443",0x047040, 0x0220, 0x470221},
	{"445",0x06b040, 0x0320, 0x6b0231},
	{"450",0x048040, 0x0220, 0x480221},
	{"454",0x06d040, 0x0320, 0x6d0231},
	{"456",0x049040, 0x0220, 0x490221},
	{"458",0x06e040, 0x0320, 0x6e0231},
	{"462",0x04a040, 0x0220, 0x4a0221},
	{"466",0x070040, 0x0320, 0x700231},
	{"468",0x04b040, 0x0220, 0x4b0221},
	{"470",0x071040, 0x0320, 0x710231},
	{"475",0x04c040, 0x0220, 0x4c0221},
	{"479",0x073040, 0x0320, 0x730231},
	{"481",0x04d040, 0x0220, 0x4d0221},
	{"483",0x074040, 0x0320, 0x740231},
	{"487",0x04e040, 0x0220, 0x4e0221},
	{"491",0x076040, 0x0320, 0x760231},
	{"493",0x04f040, 0x0220, 0x4f0221},
	{"495",0x077040, 0x0320, 0x770231},
	{"500",0x050040, 0x0220, 0x500221},
	{"504",0x079040, 0x0320, 0x790231},
	{"506",0x051040, 0x0220, 0x510221},
	{"508",0x07a040, 0x0320, 0x7a0231},
	{"512",0x052040, 0x0220, 0x520221},
	{"516",0x07c040, 0x0320, 0x7c0231},
	{"518",0x053040, 0x0220, 0x530221},
	{"520",0x07d040, 0x0320, 0x7d0231},
	{"525",0x054040, 0x0220, 0x540221},
	{"529",0x07f040, 0x0320, 0x7f0231},
	{"531",0x055040, 0x0220, 0x550221},
	{"533",0x080040, 0x0320, 0x800231},
	{"537",0x056040, 0x0220, 0x560221},
	{"543",0x057040, 0x0220, 0x570221},
	{"550",0x058040, 0x0220, 0x580221},
	{"556",0x059040, 0x0220, 0x590221},
	{"562",0x05a040, 0x0220, 0x5a0221},
	{"568",0x05b040, 0x0220, 0x5b0221},
	{"575",0x05c040, 0x0220, 0x5c0221},
	{"581",0x05d040, 0x0220, 0x5d0221},
	{"587",0x05e040, 0x0220, 0x5e0221},
	{"593",0x05f040, 0x0220, 0x5f0221},
	{"600",0x060040, 0x0220, 0x600221},
	{"606",0x061040, 0x0220, 0x610221},
	{"612",0x062040, 0x0220, 0x620221},
	{"618",0x063040, 0x0220, 0x630221},
	{"625",0x064040, 0x0220, 0x640221},
	{"631",0x065040, 0x0220, 0x650221},
	{"637",0x066040, 0x0220, 0x660221},
	{"643",0x067040, 0x0220, 0x670221},
	{"650",0x068040, 0x0220, 0x680221},
	{"656",0x069040, 0x0220, 0x690221},
	{"662",0x06a040, 0x0220, 0x6a0221},
	{"668",0x06b040, 0x0220, 0x6b0221},
	{"675",0x06c040, 0x0220, 0x6c0221},
	{"681",0x06d040, 0x0220, 0x6d0221},
	{"687",0x06e040, 0x0220, 0x6e0221},
	{"693",0x06f040, 0x0220, 0x6f0221},
	{"700",0x070040, 0x0220, 0x700221},
	{"706",0x071040, 0x0220, 0x710221},
	{"712",0x072040, 0x0220, 0x720221},
	{"718",0x073040, 0x0220, 0x730221},
	{"725",0x074040, 0x0220, 0x740221},
	{"731",0x075040, 0x0220, 0x750221},
	{"737",0x076040, 0x0220, 0x760221},
	{"743",0x077040, 0x0220, 0x770221},
	{"750",0x078040, 0x0220, 0x780221},
	{"756",0x079040, 0x0220, 0x790221},
	{"762",0x07a040, 0x0220, 0x7a0221},
	{"768",0x07b040, 0x0220, 0x7b0221},
	{"775",0x07c040, 0x0220, 0x7c0221},
	{"781",0x07d040, 0x0220, 0x7d0221},
	{"787",0x07e040, 0x0220, 0x7e0221},
	{"793",0x07f040, 0x0220, 0x7f0221},
	{"800",0x080040, 0x0220, 0x800221},
	{"825",0x042040, 0x0120, 0x420211},
};

static const int hex2bin_tbl[256] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,
    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};

/* Does the reverse of bin2hex but does not allocate any ram */
bool hex2bin(unsigned char *p, const char *hexstr, size_t len)
{
    int nibble1, nibble2;
    unsigned char idx;
    bool ret = false;

    while (*hexstr && len) {
        if (unlikely(!hexstr[1])) {
            return ret;
        }

        idx = *hexstr++;
        nibble1 = hex2bin_tbl[idx];
        idx = *hexstr++;
        nibble2 = hex2bin_tbl[idx];

        if (unlikely((nibble1 < 0) || (nibble2 < 0))) {

            return ret;
        }

        *p++ = (((unsigned char)nibble1) << 4) | ((unsigned char)nibble2);
        --len;
    }

    if (likely(len == 0 && *hexstr == 0))
        ret = true;
    return ret;
}

static void get_plldata(int type,int freq,uint8_t * reg_data,uint8_t * reg_data2)
{
	uint32_t i;
	char freq_str[10];
	sprintf(freq_str,"%d", freq);
    char plldivider1[32] = {0};
	char plldivider2[32] = {0};
    
	if(type == 1385)
	{
		for(i=0; i < sizeof(freq_pll_1385)/sizeof(freq_pll_1385[0]); i++)
		{
			if( memcmp(freq_pll_1385[i].freq, freq_str, sizeof(freq_pll_1385[i].freq)) == 0)
				break;
		}
	}
	
	sprintf(plldivider1, "%08x", freq_pll_1385[i].fildiv1);
	sprintf(plldivider2, "%04x", freq_pll_1385[i].fildiv2);
	
	if(!hex2bin(reg_data, plldivider1, strlen(plldivider1)/2)) 
    {
		 printk(KERN_ERR "Get plldivider1 value error!");
	}

	if(!hex2bin(reg_data2, plldivider2, 2)) 
    {
        printk(KERN_ERR "Get plldivider2 value error!");
	}
}


#endif
